using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DialogueSystem : MonoBehaviour {

	public Text dialogueText;
	public GameObject dialogueGUI;
	public float letterDelay = 0.1f;
	public float letterMultiplier = 0.5f;
	
	public KeyCode DialogueInput = KeyCode.F;
	
	public string[] dialogueLines;

	public bool letterIsMultiplied;
	public bool dialogueActive = false;
	public bool dialogueEnded = false;
	public bol outOfRange = true;
	

	///// ADD STATES FOR WHICH DIALOGUE HAS BEEN SAID E.G INTRODIALOGUESTATE, IDLEAFTERINTROSTATE, FOUNDITEMSTATE, BEHINDPLAYERSTATE////////////

	// Use this for initialization
	void Start () {
		dialogueText.text = "";
	}
	
	// Update is called once per frame
	void Update () {
		
	}

	public void EnterRangeOfNPC(){
		outOfRange = false;
		dialogueGUI.SetActive(true);
		if(dialogueActive == true){
			dialogueGUI.SetActive(false);

		}
	}

	private IEnumerator StartDialogue(){
		if(outOfRange == false){
			
			int dialogueLength = dialogueLines.Length;
			int currentDialogueIndex = 0;
	
			while(currentDialogueIndex < dialogueLength || !letterIsMultiplied){
				if(!letterIsMultiplied){
					letterIsMultiplied = true;
					StartCoroutine(DisplayString(dialogueLines[currentDialogueIndex++]));      ///display new line fo dialogue if there is still more dialogue that hasnt been displayed

					if(currentDialogueIndex >= dialogueLength){   //reached last dialogue line
						dialogueEnded = true;
						///  NEED TO SET PLAYER INPUTS OFF UNTIL DIALOGUE ENDED = TRUE////////////////////////

					}
				}
				yield return 0;
			}
			while(true){
				if(Input.GetKeyDown(DialogueInput) && dialogueEnded == false){
					break;
				}
				yield return 0;
				
			}

			dialogueEnded = false;
			dialogueActive = false;
			DropDialogue();
		}
	}
	private IEnumerator DisplayString(string stringToDisplay){

		if(outOfRange == false){
			int stringLength = stringToDisplay.Length;
			int currentDialogueIndex = 0;

			dialogueText.text = "";

			while(currentCharacterIndex < stringLength){
				dialogueText.text += stringToDisplay[currentCharacterIndex];
				currentCharacterIndex++;

				if(currentCharacterIndex < stringLength){
					if(Input.GetKey(DialogueInput)){
						yield return new WaitForSeconds(letterDelay * letterMultiplier);
						
					}else{
						yield return new WaitForSeconds(letterDelay);
						
					}
				}else{
					dialogueEnded = false;
					break;
				}
				
			}
			while(true){
				if(Input.GetKeyDown(DialogueInput){
					break;
				}
				yield return 0;
			}
			dialogueEnded = false;
			letterIsMultiplied = false;
			dialogueText.text = "";

		}
	}
	
	public void DropDialogue(){
		dialogueGUI.SetActive(false);
		//dialogueBoxGUI.gameObject.SetActive(false);
	}

	public void OutOfRange(){
		outOfRange = true;
		if(outOfRange == true){
			letterIsMultiplied = false;
			dialogueActive = false;
			StopAllCoroutines();
			dialogueGUI.SetActive(false);
			//dialogueBoxGUI.gameObject.SetActive(false);
		}
	}

}
